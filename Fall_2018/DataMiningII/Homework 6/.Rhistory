library(mclust)
library(dplyr)
library(kernlab)
library(speccalt)
library(kknn)
# helper function for visualization
show_digit = function(arr784, col = gray(12:1 / 12), ...) {
image(matrix(as.matrix(arr784[-785]), nrow = 28)[, 28:1], col = col, ...)
}
# load image files
load_image_file = function(filename) {
ret = list()
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n    = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
nrow = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
ncol = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
x = readBin(f, 'integer', n = n * nrow * ncol, size = 1, signed = FALSE)
close(f)
data.frame(matrix(x, ncol = nrow * ncol, byrow = TRUE))
}
# load label files
load_label_file = function(filename) {
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
y = readBin(f, 'integer', n = n, size = 1, signed = FALSE)
close(f)
y
}
# load images
train = load_image_file("train-images-idx3-ubyte")
test  = load_image_file("t10k-images-idx3-ubyte")
# view test image
show_digit(train[10000, ])
genSubSample <- function(data, sample.size){
smpl <- dplyr::sample_n(tbl = data, size = sample.size, replace = FALSE)
return(smpl)
}
ssamp <- genSubSample(train, 100)
install.packages("fcd")
library(fcd)
?spectral.clustering()
nsubsamp <- 15 # number of sub samples to generate
set.seed(1234)
nsubsamp <- 15 # number of sub samples to generate
n <- 500 # number of observations in each sub sample
ss_list <- list()
for (i in 1:nsubsamp) {
ss_list[[i]] <- genSubSample(train, sample.size = n)
}
randInd.gmm.train <- double(15)
counter <- 1
for(ss in ss_list){
gmm.train <- Mclust(dplyr::select(ss, -y), centers = 10)
randInd.gmm.train[counter] <- adjustedRandIndex(gmm$classification, ss$y)
counter <- counter + 1
}
library(mclust)
library(dplyr)
library(kernlab)
library(speccalt)
library(kknn)
library(fcd)
randInd.gmm.train <- double(15)
counter <- 1
for(ss in ss_list){
gmm.train <- Mclust(dplyr::select(ss, -y), centers = 10)
randInd.gmm.train[counter] <- adjustedRandIndex(gmm$classification, ss$y)
counter <- counter + 1
}
mean(randInd.gmm.train)
# load images
train = load_image_file("train-images-idx3-ubyte")
test  = load_image_file("t10k-images-idx3-ubyte")
# load labels
train$y = as.factor(load_label_file("train-labels-idx1-ubyte"))
test$y  = as.factor(load_label_file("t10k-labels-idx1-ubyte"))
# view test image
show_digit(train[10000, ])
randInd.gmm.train <- double(15)
counter <- 1
for(ss in ss_list){
gmm.train <- Mclust(dplyr::select(ss, -y), centers = 10)
randInd.gmm.train[counter] <- adjustedRandIndex(gmm$classification, ss$y)
counter <- counter + 1
}
nsubsamp <- 15 # number of sub samples to generate
n <- 500 # number of observations in each sub sample
ss_list <- list()
for (i in 1:nsubsamp) {
ss_list[[i]] <- genSubSample(train, sample.size = n)
}
for(ss in ss_list){
gmm.train <- Mclust(dplyr::select(ss, -y), centers = 10)
randInd.gmm.train[counter] <- adjustedRandIndex(gmm$classification, ss$y)
counter <- counter + 1
}
randInd.gmm.train <- double(15)
counter <- 1
for(ss in ss_list){
gmm.train <- Mclust(dplyr::select(ss, -y), centers = 10)
randInd.gmm.train[counter] <- adjustedRandIndex(gmm.train$classification, ss$y)
counter <- counter + 1
}
mean(randInd.gmm.train)
ss_list <- list()
for (i in 1:nsubsamp) {
ss_list[[i]] <- genSubSample(test, sample.size = n)
}
randInd.gmm.test <- double(15)
counter <- 1
randInd.gmm.test <- double(15)
counter <- 1
for(ss in ss_list){
gmm.test <- Mclust(dplyr::select(ss, -y), centers = 10)
randInd.gmm.test[counter] <- adjustedRandIndex(gmm.test$classification, ss$y)
counter <- counter + 1
}
mean(randInd.gmm.test)
sigma.grid <- 2*10^(-10:-5)
randInd.sc.tune <- double(10)
counter <- 1
for(sg in sigma.grid){
sc.train <- specc(as.matrix(dplyr::select(ssamp, -y)), centers = 10, kernel = "rbfdot", kpar = list("sigma" = sg))
randInd.sc.tune[counter] <- adjustedRandIndex(sc.train@.Data, ssamp$y)
counter <- counter + 1
}
# tune sigma parameter
ssamp <- genSubSample(train, 500)
ssamp <- genSubSample(train, 500) # single subsample to be used in tuning
randInd.sc.tune <- double(10)
counter <- 1
for(sg in sigma.grid){
sc.train <- specc(as.matrix(dplyr::select(ssamp, -y)), centers = 10, kernel = "rbfdot", kpar = list("sigma" = sg))
randInd.sc.tune[counter] <- adjustedRandIndex(sc.train@.Data, ssamp$y)
counter <- counter + 1
}
max(randInd.sc.tune)
randInd.sc.tune
sigma.grid
# sigma.grid <- 2*10^(-10:-5) # started with this grid: ARI max at 2e-06
sigma.grid <- 2*10^(seq(-7, -5, by = 0.1)) # refined to this grid
randInd.sc.tune <- double(10)
counter <- 1
for(sg in sigma.grid){
sc.train <- specc(as.matrix(dplyr::select(ssamp, -y)), centers = 10, kernel = "rbfdot", kpar = list("sigma" = sg))
randInd.sc.tune[counter] <- adjustedRandIndex(sc.train@.Data, ssamp$y)
counter <- counter + 1
}
max(randInd.sc.tune)
randInd.sc.tune
sigma.grid[14]
# sigma.grid <- 2*10^(-10:-5) # started with this grid: ARI max at 2e-06
sigma.grid <- 2*10^(seq(-7, -5, by = 0.1)) # refined to this grid
sigma.grid[14]
# selected sigma = 3.99e-06
sig = 3.99 * 10^-6
randInd.sc.train <- double(15)
counter <- 1
for(ss in ss_list){
sc.train <- specc(as.matrix(dplyr::select(ss, -y)), centers = 10, kernel = "rbfdot", kpar = list("sigma" = sig))
randInd.sc.train[counter] <- adjustedRandIndex(sc.train@.Data, ss$y)
counter <- counter + 1
}
mean(randInd.sc.train)
setwd("C:/Users/misaa/Downloads")
# Read in hospital data
hosp <- read.table("ds10.3.7-hospital-emergency-room.txt", header = TRUE)
View(hosp)
dpois(5, lambda = 7)
hosp$Number.of.Arrivals
dpois(hosp$Number.of.Arrivals, lambda = 7)
# Calculate expected values
n <- sum(hosp$Frequency) # n is sample size
n
exp_val <- n * probs # expected value is n * probabilities (this returns a vector)
# Get probabilites
# Remember that the dpois() function gives us values of the probability mass function
# from the Poisson distribution. If we give it a vector of values (hosp$Number.of.Arrivals),
# then it returns a vector of probabilities, which we can then give to the chisq.test()
# function.
probs <- dpois(hosp$Number.of.Arrivals, lambda = 7)
obsv <- hosp$Frequency
# Calculate expected values
n <- sum(hosp$Frequency) # n is sample size
exp_val <- n * probs # expected value is n * probabilities (this returns a vector)
exp_val
sum(exp_val < 5) # this counts the number of expected values less than 5
# Pool the probabilities of cells 1 and 2.
probs0_1 <- probs[1] + probs[2] # pooled probabilities of observing X = 0 and X = 1
probs2_13 <- probs[3:14] # probabilities of observing X = 2 up through X = 13
final_probs <- c(probs0_1, probs2_13, probs_greq14) # put all the probabilities into one vector
probs2_13 <- probs[3:14] # probabilities of observing X = 2 up through X = 13
probs_greq14 <- 1 - ppois(13, lambda = 7) # probability of obseriving X >= 14
final_probs <- c(probs0_1, probs2_13, probs_greq14) # put all the probabilities into one vector
counts0_1 <- obsv[1] + obsv[2] # pool observed counts from of X = 0 and X = 1
counts2_13 <- obsv[3:14] # observed counts of X = 2 up through X = 13
counts_gr14 <- 0 # observed counts of X >= 14 (none observed)
final_counts <- c(counts0_1, counts2_13, counts_gr14)
exp_val <- n * final_probs # check expected counts
sum(exp_val < 5) # no expected cell counts are greater than 5
exp_val
# Run chisq.test
chisq.test(final_counts, p = final_probs)
# 10.3.11
chem <- read.table("ds10.3.13-chemical-solution-acidities.txt")
chem
# 10.3.11
chem <- read.table("ds10.3.13-chemical-solution-acidities.txt", header = TRUE)
chem
489/sum(chem$Frequency)
obsv <- chem$Frequency
probs <- c(.04, .06, 0.8, 0.6, .04)
obsv
probs
chisq.test(obsv, p = probs)
probs <- c(.04, .06, 0.8, 0.06, .04)
chisq.test(obsv, p = probs)
chisq.test(chem$Frequency, p = c(.04, .06, 0.8, 0.06, .04))
?matrix
matrix(c(69, 75, 56, 82, 64, 54, 74, 84, 42), nrow = 3, ncol = 3, byrow = FALSE)
tbl <- matrix(c(69, 75, 56, 82, 64, 54, 74, 84, 42), nrow = 3, ncol = 3, byrow = FALSE)
chisq.test(tbl)
mean(randInd.sc.train)
sc.test <- specc(as.matrix(dplyr::select(test, -y)), centers = 10, kernel = "rbfdot", kpar = list("sigma" = sig))
adjustedRandIndex(sc.test@.Data, test$y)
library(knitr)
include_graphics("phateplot1.png")
include_graphics("phateplot1.png")
include_graphics("phateplot2.png")
include_graphics("phateplot3d.png")
include_graphics("phateplot1.png")
include_graphics("phateplot2.png")
include_graphics("phateplot3d2.png")
include_graphics("phateplot3d.png")
