library(shiny)
library(shinydashboard)
runApp('UQViz')
cdf_arr = read.csv('cdfs.csv', header = FALSE)
runApp('UQViz')
runApp('UQViz')
cdf_arr = read.csv('cdfs.csv', header = FALSE)
cdf_arr = t(cdf_arr)
cdf_arr = read.csv('data/cdfs.csv', header = FALSE)
cdf_df = data.frame(cdf_arr)
cdf_df = t(cdf_df)
runApp('UQViz')
cdf_arr <-  read.csv('cdfs.csv', header = FALSE)
cdf_df <-  t(cdf_df)
cdf_df <-  data.frame(cdf_arr)
runApp('UQViz')
cdf_arr <-  read.csv('cdfs.csv', header = FALSE)
cdf_df <-  t(cdf_df)
cdf_df <-  data.frame(cdf_arr)
cdf_df <- dplyr::select(cdf_df, V1:V200)
plt <- plotAllLayers(cdf_df)
plotAllLayers<-function(df){
p<-ggplot(data=df,aes(df[,1]))
for(i in names(df)[-1]){
p<-p+geom_line(aes_string(y=i), alpha = 0.2)
}
return(p)
}
plt <- plotAllLayers(cdf_df)
plt
cdf_arr <-  read.csv('cdfs.csv', header = FALSE)
cdf_arr <-  t(cdf_arr)
dim(cdf_arr)
cdf_arr <-  read.csv('cdfs.csv', header = FALSE)
cdf_arr <-  read.csv('cdfs.csv', header = FALSE)
dim(cdf_arr)
getwd()
cdf_arr <-  read.csv('cdfs.csv', header = FALSE)
cdf_arr <-  t(cdf_arr)
dim(cdf_arr)
cdf_arr = read.csv('cdfs.csv', header = FALSE)
cdf_arr <-  read.csv('cdfs.csv', header = FALSE)
dim(cdf_arr)
cdf_arr <-  t(cdf_arr)
dim(cdf_arr)
cdf_df <-  data.frame(cdf_arr)
head(cdf_df$X1)
(cdf_df$X2)
(cdf_df$V1)
head(cdf_df$X3)
head(cdf_d)
head(cdf_df)
cdf_arr <-  read.csv('cdfs.csv', header = FALSE)
dim(cdf_arr)
cdf_arr <-  t(cdf_arr)
cdf_df <-  data.frame(cdf_arr)
plt <- plotAllLayers(cdf_df)
dim(cdf_arr)
cdf_arr <-  t(cdf_arr)
cdf_arr <-  t(cdf_arr)
cdf_df <-  data.frame(cdf_arr)
dim(cdf_df)
names(df)[-1]
names(cdf_df)[-1]
plotAllLayers<-function(df){
p<-ggplot(data=df,aes(df[,1]))
for(i in names(df)[-1]){
p<-p+geom_line(aes_string(y=i), alpha = 0.2)
}
return(p)
}
plt <- plotAllLayers(cdf_df)
plt
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
?quantile
apply(cdf_df, quantile, probs = c(0.05, 0.95))
apply(cdf_df, FUN = quantile, probs = c(0.05, 0.95))
apply(cdf_df, 1, FUN = quantile, probs = c(0.05, 0.95))
quant <- apply(cdf_df, 1, FUN = quantile, probs = c(0.05, 0.95))
head(quant)
dims(quant)
dim(quant)
df <- data_frame(quant)
df <- data_frame_(quant)
df <- tibble(quant)
df$quant
df <- tibble(quant[,1], quant[,2])
df
head(df)
df <- tibble(quant)
head(quant)
head(df)
df$quant$V1
runApp('UQViz')
calc_pbox <- function(data, p_lower, p_upper){
# for row in np.transpose(cdf_arr): # loop over transposed matrix
#   qlower = np.quantile(row, q = pbox_lower) # calculate lower quantile
#   qupper = np.quantile(row, q = pbox_upper) # calculate upper quantile
#   ql[counter] = qlower # store
#   qu[counter] = qupper # store
#   counter = counter + 1
pbox <- apply(cdf_df, 1, FUN = quantile, probs = c(p_lower, p_upper))
pbox <- data_frame(pbox)
return(pbox)
calc_pbox <- function(data, p_lower, p_upper){
# for row in np.transpose(cdf_arr): # loop over transposed matrix
#   qlower = np.quantile(row, q = pbox_lower) # calculate lower quantile
#   qupper = np.quantile(row, q = pbox_upper) # calculate upper quantile
#   ql[counter] = qlower # store
#   qu[counter] = qupper # store
#   counter = counter + 1
pbox <- apply(cdf_df, 1, FUN = quantile, probs = c(p_lower, p_upper))
pbox <- data_frame(pbox)
return(pbox)
}
calc_pbox(cdf_df, 0.05, 0.95)
pbox <- calc_pbox(cdf_df, 0.05, 0.95)
dim(pbox)
calc_pbox <- function(data, p_lower, p_upper){
# for row in np.transpose(cdf_arr): # loop over transposed matrix
#   qlower = np.quantile(row, q = pbox_lower) # calculate lower quantile
#   qupper = np.quantile(row, q = pbox_upper) # calculate upper quantile
#   ql[counter] = qlower # store
#   qu[counter] = qupper # store
#   counter = counter + 1
pbox <- apply(cdf_df, 1, FUN = quantile, probs = c(p_lower, p_upper))
# pbox <- data_frame(pbox)
return(pbox)
}
pbox <- calc_pbox(cdf_df, 0.05, 0.95)
dim(pbox)
pbox[,1]
pbox[,2]
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
shiny::runApp('UQViz')
cdf_arr = read.csv('cdfs.csv', header = FALSE)
cdf_arr = t(cdf_arr)
dim(cdf_arr)
cdf_df = data.frame(cdf_arr)
cdf_rf = melt(data = cdf_df, id.vars = "X1")
ggplot(cdf_rf, aes(x = X1, y = value)) +
geom_line(alpha = 0.5)
library(reshape2)
library(dplyr)
library(ggplot2)
ggplot(cdf_rf, aes(x = X1, y = value)) +
geom_line(alpha = 0.5)
cdf_rf = melt(data = cdf_df, id.vars = "X1")
ggplot(cdf_rf, aes(x = X1, y = value)) +
geom_line(alpha = 0.5)
plt <-  plt + geom_line(aes(x = cdf_df[,1], y = cdf_df[,2]))
plotAllLayers<-function(df){
p<-ggplot(data=df,aes(df[,1]))
for(i in names(df)[-1]){
p<-p+geom_line(aes_string(y=i), alpha = 0.2)
}
return(p)
}
plotAllLayers(cdf_df)
runApp('UQViz')
cdf_arr <-  read.csv('cdfs.csv', header = FALSE)
dim(cdf_arr)
cdf_arr <-  t(cdf_arr)
cdf_df <-  data.frame(cdf_arr)
cdf_df
runApp('UQViz')
runApp('UQViz')
?downloadButton
runApp('UQViz')
runApp('UQViz')
shiny::runApp('UQViz')
chooses(8,2)
choose(8,2)
80+60-53
72-50
shiny::runApp('UQViz')
cdf_arr = read.csv('cdfs3.csv', header = FALSE)
cdf_df = data.frame(cdf_arr)
cdf_arr = read.csv('cdfs3.csv', header = FALSE)
dim(cdf_arr)
plt <- ggplot(data = values$data, aes(values$data[,1]))
library(ggplot2)
plt <- ggplot(data = values$data, aes(values$data[,1]))
for i in names(values$data)[-1]{
plt <- plt + geom_line(aes_string(y=i), alpha = input$sliderAlpha)
}
for(i in names(values$data)[-1]){
plt <- plt + geom_line(aes_string(y=i), alpha = input$sliderAlpha)
}
plt <- ggplot(data = values$data, aes(values$data[,1]))
plt <- ggplot(data = cdf_df, aes(cdf_df[,1]))
for(i in names(cdf_df)[-1]){
plt <- plt + geom_line(aes_string(y=i), alpha = 0.2)
}
plt
calc_pbox <- function(data, p_upper, p_lower){
# for row in np.transpose(cdf_arr): # loop over transposed matrix
#   qlower = np.quantile(row, q = pbox_lower) # calculate lower quantile
#   qupper = np.quantile(row, q = pbox_upper) # calculate upper quantile
#   ql[counter] = qlower # store
#   qu[counter] = qupper # store
#   counter = counter + 1
pbox <- apply(values$data, 1, FUN = quantile, probs = c(p_lower, p_upper))
# pbox <- data_frame(pbox)
return(t(pbox))
}
calc_pbox(cdf_df, p_upper = 0.9, p_lower = 0.1)
calc_pbox <- function(data, p_upper, p_lower){
# for row in np.transpose(cdf_arr): # loop over transposed matrix
#   qlower = np.quantile(row, q = pbox_lower) # calculate lower quantile
#   qupper = np.quantile(row, q = pbox_upper) # calculate upper quantile
#   ql[counter] = qlower # store
#   qu[counter] = qupper # store
#   counter = counter + 1
pbox <- apply(values$data, 1, FUN = quantile, probs = c(p_lower, p_upper))
# pbox <- data_frame(pbox)
return(t(pbox))
}
# for row in np.transpose(cdf_arr): # loop over transposed matrix
#   qlower = np.quantile(row, q = pbox_lower) # calculate lower quantile
#   qupper = np.quantile(row, q = pbox_upper) # calculate upper quantile
#   ql[counter] = qlower # store
#   qu[counter] = qupper # store
#   counter = counter + 1
pbox <- apply(data, 1, FUN = quantile, probs = c(p_lower, p_upper))
# pbox <- data_frame(pbox)
return(t(pbox))
calc_pbox <- function(data, p_upper, p_lower){
# for row in np.transpose(cdf_arr): # loop over transposed matrix
#   qlower = np.quantile(row, q = pbox_lower) # calculate lower quantile
#   qupper = np.quantile(row, q = pbox_upper) # calculate upper quantile
#   ql[counter] = qlower # store
#   qu[counter] = qupper # store
#   counter = counter + 1
pbox <- apply(data, 1, FUN = quantile, probs = c(p_lower, p_upper))
# pbox <- data_frame(pbox)
return(t(pbox))
}
calc_pbox(cdf_df, p_upper = 0.9, p_lower = 0.1)
pbx = calc_pbox(cdf_df, p_upper = 0.9, p_lower = 0.1)
plt <- plt +
geom_line(aes(y = pbx[,1]), col = "red", lwd = 1) +
geom_line(aes(y = pbx[,2]), col = "red", lwd = 1)
plt
plt <- ggplot(data = cdf_df, aes(cdf_df[,1]))
plt <- plt +
geom_line(aes(y = pbx[,1]), col = "red", lwd = 1) +
geom_line(aes(y = pbx[,2]), col = "red", lwd = 1)
plt
pbx_df = data.frame(data[,1], pbx[,1], pbx[,2])
pbx_df = data.frame(cdf_df[,1], pbx[,1], pbx[,2])
head(pbx_df)
library(dplyr)
pbx_df = data.frame(x = cdf_df[,1], lower pbx[,1], upper = pbx[,2])
pbx_df = data.frame(x = cdf_df[,1], lower = pbx[,1], upper = pbx[,2])
select(pbx_df)
select(pbx_df, lower = 0.75)
select(pbx_df, lower == 0.75)
pbx_df = data.frame(x = cdf_df[,1], lower = pbx[,1], upper = pbx[,2])
head(pbx_df)
range(pbx_lower)
range(pbx$lower)
filter(pbx_df, lower == 0.75)
filter(pbx_df, min(lower - 0.75))
filter(pbx_df, which.min(abs(pbx_df - 0.75)))
filter(pbx_df, which.min(abs(lower - 0.75)))
which.min(abs(pbx_df$lower - 0.75))
which.min(abs(pbx_df$x - 0.75))
mean(pbx_df$lower)
summary(pbx_df$lower)
which.min(abs(pbx_df$x - 0.75))
which.min(abs(pbx_df$x - 0.75))
which.min(abs(pbx_df$lower - 0.75))
pbx_df$lower[330]
pbx_df[which.min(abs(pbx_df$lower - 0.75)),]
pbx_df[which.min(abs(pbx_df$upper - 0.75)),]
plt +
geom_hline(yintercept = 0.75, lty = 2)
pbx_df[which.min(abs(pbx_df$upper - 0.75)),]$x
plt +
geom_hline(yintercept = 0.75, lty = 2) +
geom_vline(xintercept = pbx_df[which.min(abs(pbx_df$upper - 0.75)),]$x) +
geom_vline(xintercept = pbx_df[which.min(abs(pbx_df$lower - 0.75)),]$x)
shiny::runApp('UQViz')
library(shiny)
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
?geom_text
runApp('UQViz')
plt <- ggplot(data = cdf_df, aes(cdf_df[,1]))
for(i in names(cdf_df)[-1]){
plt <- plt + geom_line(aes_string(y=i), alpha = 0.2)
}
plt
plt
ggplot(cdf_rf, aes(x = X1, y = value)) +
geom_line(alpha = 0.5)
cdf_rf = melt(data = cdf_df, id.vars = "X1")
library(reshape2)
library(dplyr)
library(ggplot2)
cdf_rf = melt(data = cdf_df, id.vars = "X1")
cdf_arr = read.csv('cdfs3.csv', header = FALSE)
# cdf_arr = t(cdf_arr)
# dim(cdf_arr)
cdf_df = data.frame(cdf_arr)
cdf_rf = melt(data = cdf_df, id.vars = "X1")
cdf_df
cdf_rf = melt(data = cdf_df, id.vars = "V1")
ggplot(cdf_rf, aes(x = X1, y = value)) +
geom_line(alpha = 0.5)
ggplot(cdf_rf, aes(x = V1, y = value)) +
geom_line(alpha = 0.5)
ggplot(cdf_rf, aes(x = V1, y = value)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon")
ggplot(cdf_rf, aes(x = V1, y = value)) +
stat_density_2d()
View(cdf_arr)
plt <- ggplot(data = cdf_df, aes(cdf_df[,1]))
for(i in names(cdf_df)[-1]){
plt <- plt + geom_line(aes_string(y=i), alpha = 0.2)
}
plt
head(cdf_rf)
dplyr::filter(cdf_rf, value > 0.01, value < 0.99)
newdf <- dplyr::filter(cdf_rf, value > 0.01, value < 0.99)
ggplot(newdf, aes(x = V1, y = value)) +
stat_density_2d()
ggplot(newdf, aes(x = V1, y = value)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon")
shiny::runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
library(shiny)
library(shinydashboar
d)
library(shiny)
library(shinydashboard)
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
cdf_arr = read.csv('cdfs3.csv', header = FALSE)
cdf_df = data.frame(cdf_arr)
plotAllLayers<-function(df){
p<-ggplot(data=df,aes(df[,1]))
for(i in names(df)[-1]){
p<-p+geom_line(aes_string(y=i), alpha = 0.2)
}
return(p)
}
plotAllLayers(cdf_df)
plt <- ggplot(data = cdf_df, aes(cdf_df[,1]))
for(i in names(cdf_df)[-1]){
plt <- plt + geom_line(aes_string(y=i), alpha = 0.2)
}
plt <- plt +
geom_line(aes(y = pbx[,1]), col = "red", lwd = 1) +
geom_line(aes(y = pbx[,2]), col = "red", lwd = 1)
plt
pbx = calc_pbox(cdf_df, p_upper = 0.9, p_lower = 0.1)
plt <- ggplot(data = cdf_df, aes(cdf_df[,1]))
for(i in names(cdf_df)[-1]){
plt <- plt + geom_line(aes_string(y=i), alpha = 0.2)
}
plt <- plt +
geom_line(aes(y = pbx[,1]), col = "red", lwd = 1) +
geom_line(aes(y = pbx[,2]), col = "red", lwd = 1)
plt
pbx = calc_pbox(cdf_df, p_upper = 0.9, p_lower = 0.1)
calc_pbox <- function(data, p_upper, p_lower){
# for row in np.transpose(cdf_arr): # loop over transposed matrix
#   qlower = np.quantile(row, q = pbox_lower) # calculate lower quantile
#   qupper = np.quantile(row, q = pbox_upper) # calculate upper quantile
#   ql[counter] = qlower # store
#   qu[counter] = qupper # store
#   counter = counter + 1
pbox <- apply(data, 1, FUN = quantile, probs = c(p_lower, p_upper))
# pbox <- data_frame(pbox)
return(t(pbox))
}
pbx = calc_pbox(cdf_df, p_upper = 0.9, p_lower = 0.1)
plt <- ggplot(data = cdf_df, aes(cdf_df[,1]))
for(i in names(cdf_df)[-1]){
plt <- plt + geom_line(aes_string(y=i), alpha = 0.2)
}
plt <- plt +
geom_line(aes(y = pbx[,1]), col = "red", lwd = 1) +
geom_line(aes(y = pbx[,2]), col = "red", lwd = 1)
plt
plt <- ggplot(data = cdf_df, aes(cdf_df[,1])) +
# for(i in names(cdf_df)[-1]){
#   plt <- plt + geom_line(aes_string(y=i), alpha = 0.2)
# }
geom_line(aes(y = pbx[,1]), col = "red", lwd = 1) +
geom_line(aes(y = pbx[,2]), col = "red", lwd = 1)
plt
?xlim
library(ggplot2)
?ggplot2::xlim
minimum <- min(cdf_df[,1])
maximum <- max(cdf_df[,1])
plt +
xlim(minimum, maximum)
minimum
maximum
plt +
expand_limits(minimum, maximum)
px <- pretty(cdf_df[,1])
t +
scale_x_continuous(breaks = px, limits = range(px))
plt +
scale_x_continuous(breaks = px, limits = range(px))
View(pbx)
plt +
scale_x_continuous(breaks = px, limits = range(px)) +
theme_bw() +
theme(minor_gridlines = element_blank())
plt +
scale_x_continuous(breaks = px, limits = range(px)) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.minor.y = element_blank())
plt +
scale_x_continuous(breaks = px, limits = range(px)) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank())
plt +
scale_x_continuous(breaks = px, limits = range(px)) +
theme_linedraw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank())
theme_bw
plt +
scale_x_continuous(breaks = px, limits = range(px)) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank())
plt +
scale_x_continuous(breaks = px, limits = range(px)) +
theme_classic() +
theme(panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank())
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
?numericInput
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
mean(cdf_df[,1])
min(cdf_df[,1])
max(cdf_df[,1])
quantile(cdf_df[,1], 0.25)
quantile(cdf_df[,1], 0.1)
runApp('UQViz')
runApp('UQViz')
shiny::runApp('UQViz')
?geom_text
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
shiny::runApp('UQViz')
runApp('UQViz')
library(shinydashboard)
library(plotly)
library(shinya
library(shiny)
library(shinydashboard)
library(plotly)
library(shinyalert)
library(shiny)
runApp('UQViz')
?actionBttn
runApp('UQViz')
?shinyalert
runApp('UQViz')
runApp('UQViz')
shiny::runApp('UQViz')
runApp('UQViz')
?tags$div
library(shiny)
?tags$div
runApp('UQViz')
runApp('UQViz')
citation("shiny")
runApp('UQViz')
citation(R)
citation("R")
citation()
citation("Rstudio")
runApp('UQViz')
runApp('UQViz')
shiny::runApp('UQViz')
?aes_string
runApp('UQViz')
shiny::runApp('UQViz')
runApp('UQViz')
runApp('UQViz')
library(shinyWidgets)
library(shinyalert)
citation(shinyalert)
citation("shinyalert")
citation("shinyWidgets")
runApp('UQViz')
runApp('UQViz')
shiny::runApp('UQViz')
runApp('UQViz')
